#ifndef AP_DISPLAY_H
#define AP_DISPLAY_H

#include <Arduino.h> 
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#include "ap_get.h"

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1

extern Adafruit_SSD1306 screen;
extern tm timeinfo;

const uint8_t heartBitmap[] PROGMEM = {
    B00000000, 
    B01100110, 
    B11111111, 
    B11111111, 
    B01111110, 
    B00111100, 
    B00011000, 
    B00000000
};

const uint8_t TamagotchiBitLeft[] PROGMEM = {
    0x00, 0x00, 
    0x0f, 0x80, 
    0x1f, 0x80, 
    0x1d, 0xc0, 
    0x7d, 0xc0, 
    0xff, 0xf0, 
    0x7f, 0xfc, 
    0x3f, 0xfe, 
    0x3f, 0xf6, 
    0x3d, 0xce, 
    0x3e, 0x3c, 
    0x1e, 0x3c, 
    0x1f, 0xf0, 
    0x07, 0xf0, 
    0x01, 0x80
};

const uint8_t TamagotchiBitRight[] PROGMEM = {
    0x00, 0x00, 
    0x03, 0xe0, 
    0x03, 0xf0, 
    0x07, 0x70, 
    0x07, 0x7c, 
    0x1f, 0xfe, 
    0x7f, 0xfc, 
    0xff, 0xf8, 
    0xdf, 0xf8, 
    0xe7, 0x78, 
    0x78, 0xf8, 
    0x78, 0xf0, 
    0x1f, 0xf0, 
    0x1f, 0xc0, 
    0x03, 0x00
};


const uint8_t Tamagotch_no[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xf8, 0x00, 
0x00, 0x00, 0x03, 0xf8, 0x00, 
0x00, 0x00, 0x03, 0xfc, 0x00, 
0x00, 0x00, 0x00, 0x1f, 0x00, 
0x00, 0x00, 0x00, 0x3f, 0x00, 
0x00, 0x00, 0x03, 0xff, 0xc0, 
0x00, 0x00, 0x03, 0xff, 0xc0, 
0x00, 0x00, 0x03, 0xff, 0xc0, 
0x00, 0x00, 0x03, 0xe7, 0xc0, 
0x00, 0x00, 0x03, 0xe7, 0xe0, 
0x3e, 0x00, 0x03, 0xe7, 0xf8, 
0x3e, 0x00, 0x03, 0xe7, 0xfc, 
0x3e, 0x00, 0x03, 0xe7, 0xfc, 
0x3f, 0xf0, 0x1f, 0xe7, 0xc0, 
0x3f, 0xf0, 0x1f, 0xe7, 0xc0, 
0x3f, 0xff, 0xff, 0xff, 0xc0, 
0x3f, 0xff, 0xff, 0xff, 0xc0, 
0x07, 0xff, 0xff, 0xff, 0xf0, 
0x07, 0xff, 0xff, 0xff, 0xf0, 
0x07, 0xff, 0xff, 0xff, 0xf0, 
0x3f, 0xc1, 0xff, 0xff, 0xf0, 
0x3f, 0xc1, 0xff, 0xff, 0xf0, 
0x3f, 0xcf, 0xff, 0xff, 0xf0, 
0x3f, 0xcf, 0xff, 0xff, 0xf0, 
0x3f, 0xcf, 0xff, 0xff, 0xf0, 
0x07, 0xf0, 0x03, 0xff, 0xf0, 
0x07, 0xf0, 0x03, 0xff, 0xf0, 
0x01, 0xff, 0xff, 0xff, 0xc0, 
0x01, 0xff, 0xff, 0xff, 0xc0, 
0x01, 0xff, 0xff, 0xff, 0xc0, 
0x00, 0x0e, 0x7f, 0xf8, 0x00, 
0x00, 0x0e, 0x7f, 0xf8, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x7c, 0xe0, 0x00, 
0x00, 0x00, 0x7c, 0xe0, 0x00
};

const uint8_t Tamagotch_dn[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x03, 0xf8, 0x00, 
0x00, 0x33, 0x03, 0xf8, 0x00, 
0x00, 0x33, 0x03, 0xfc, 0x00, 
0x00, 0x33, 0x00, 0x1f, 0x00, 
0x00, 0x33, 0x00, 0x3f, 0x00, 
0x00, 0x33, 0x03, 0xe1, 0xc0, 
0x00, 0x00, 0x03, 0x8c, 0x40, 
0x00, 0x33, 0x03, 0x3f, 0x40, 
0x00, 0x33, 0x02, 0x7f, 0x40, 
0x00, 0x00, 0x02, 0xe7, 0x60, 
0x3e, 0x00, 0x02, 0xf3, 0x38, 
0x3e, 0x00, 0x02, 0xf3, 0x9c, 
0x3e, 0x00, 0x02, 0xe6, 0x04, 
0x3f, 0xf0, 0x1e, 0xfe, 0x04, 
0x3f, 0xf0, 0x1e, 0xfe, 0x24, 
0x3f, 0xff, 0xf8, 0xff, 0x8c, 
0x3f, 0xff, 0xf2, 0x7f, 0x38, 
0x07, 0xff, 0xf7, 0x06, 0x70, 
0x07, 0xff, 0xf7, 0xf0, 0xf0, 
0x07, 0xff, 0xf0, 0xff, 0xf0, 
0x3f, 0xc1, 0xfe, 0x7f, 0xf0, 
0x3f, 0xc1, 0xff, 0x01, 0xf0, 
0x3f, 0xcf, 0xfe, 0x18, 0xf0, 
0x3f, 0xcf, 0xfe, 0x18, 0xf0, 
0x3f, 0xcf, 0xfe, 0x18, 0xf0, 
0x07, 0xf0, 0x03, 0x18, 0xf0, 
0x07, 0xf0, 0x03, 0x18, 0xf0, 
0x01, 0xff, 0xff, 0x18, 0xc0, 
0x01, 0xff, 0xff, 0xff, 0xc0, 
0x01, 0xff, 0xff, 0xff, 0xc0, 
0x00, 0x0e, 0x7f, 0xf8, 0x00, 
0x00, 0x0e, 0x7f, 0xf8, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x7c, 0xe0, 0x00, 
0x00, 0x00, 0x7c, 0xe0, 0x00
};


const uint8_t startup[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x7f, 0xc8, 0x7f, 0xc2, 0x60, 0x00, 
0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x7f, 0xc8, 0x7f, 0xc2, 0x60, 0x00, 
0x07, 0xff, 0xff, 0x03, 0xff, 0xfe, 0x18, 0xff, 0xfc, 0x30, 0x61, 0x08, 0x64, 0xc2, 0x60, 0x00, 
0x07, 0xff, 0xff, 0x03, 0xff, 0xfe, 0x18, 0xff, 0xfc, 0x30, 0x61, 0x08, 0x64, 0xc6, 0x60, 0x00, 
0x04, 0x09, 0x83, 0x02, 0x00, 0x00, 0x04, 0x01, 0x80, 0x0c, 0x19, 0x30, 0x04, 0x0f, 0xf0, 0x00, 
0x04, 0x09, 0x83, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x60, 0x00, 
0x04, 0x09, 0x83, 0x0c, 0x7f, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x19, 0x08, 0x60, 0x00, 
0x00, 0x31, 0x80, 0x00, 0x00, 0x00, 0x18, 0x01, 0x80, 0x30, 0x7f, 0xf8, 0x64, 0x3f, 0xf0, 0x00, 
0x00, 0x31, 0x80, 0x00, 0x00, 0x00, 0x18, 0x01, 0x80, 0x30, 0x7f, 0xf8, 0x64, 0x3f, 0xf0, 0x00, 
0x01, 0xc1, 0xfc, 0x0f, 0xff, 0xf8, 0x04, 0xff, 0xfc, 0x0c, 0x01, 0x08, 0x7f, 0xc8, 0x60, 0x00, 
0x01, 0xc1, 0xfc, 0x0f, 0xff, 0xf8, 0x04, 0xff, 0xfc, 0x0c, 0x03, 0x08, 0x7f, 0xc8, 0x60, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x99, 0x08, 0x00, 0x30, 0x04, 0x00, 0xff, 0xf8, 0x04, 0x08, 0x60, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x30, 0x0c, 0x00, 0x03, 0x98, 0x0e, 0x0c, 0x60, 0x00, 
0x00, 0xff, 0xf0, 0x00, 0x18, 0x08, 0x00, 0x3f, 0xfc, 0x0c, 0x01, 0x08, 0x7f, 0xcf, 0xf0, 0x00, 
0x00, 0x06, 0x00, 0x0f, 0xff, 0xc8, 0x01, 0x30, 0x0c, 0x0c, 0x7f, 0xf8, 0x06, 0x0c, 0x60, 0x00, 
0x00, 0x02, 0x00, 0x0f, 0xff, 0xc8, 0x01, 0x30, 0x04, 0x0c, 0x7f, 0xf8, 0x04, 0x08, 0x60, 0x00, 
0x00, 0x02, 0x00, 0x00, 0x99, 0x02, 0x04, 0x3f, 0xfc, 0x30, 0x01, 0x00, 0x19, 0x08, 0x60, 0x00, 
0x00, 0x06, 0x00, 0x00, 0x99, 0x02, 0x04, 0x3f, 0xfc, 0x30, 0x03, 0x00, 0x19, 0x0c, 0x60, 0x00, 
0x07, 0xff, 0xff, 0x0e, 0x18, 0xc2, 0x18, 0x30, 0x04, 0x30, 0x1f, 0x00, 0x60, 0xcf, 0xf0, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x01, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x10, 0x00, 0x00, 
0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 
0x00, 0x04, 0x87, 0x80, 0x00, 0x80, 0xe3, 0xf8, 0x70, 0xf9, 0xe7, 0xc7, 0x17, 0x10, 0x00, 0x00, 
0x00, 0x08, 0x44, 0x2f, 0xe0, 0x80, 0x12, 0x44, 0x09, 0x0a, 0x11, 0x08, 0x58, 0x90, 0x00, 0x00, 
0x00, 0x08, 0x44, 0x20, 0x00, 0x80, 0xf2, 0x44, 0x79, 0x0a, 0x11, 0x08, 0x10, 0x90, 0x00, 0x00, 
0x00, 0x0c, 0x44, 0x20, 0x00, 0x80, 0x12, 0x44, 0x09, 0x0a, 0x11, 0x08, 0x10, 0x90, 0x00, 0x00, 
0x00, 0x0f, 0xc4, 0x20, 0x00, 0x82, 0x12, 0x45, 0x09, 0x0a, 0x11, 0x08, 0x10, 0x90, 0x00, 0x00, 
0x00, 0x10, 0x24, 0x20, 0x00, 0x82, 0x12, 0x45, 0x09, 0x0a, 0x11, 0x08, 0x50, 0x90, 0x00, 0x00, 
0x00, 0x10, 0x27, 0x80, 0x00, 0x80, 0xf2, 0x44, 0x78, 0xf9, 0xe0, 0xc7, 0x10, 0x90, 0x00, 0x00, 
0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

typedef enum {
    BOOT,
    GET,
    MENU,
    Status,
    Frame
} State;

class Tamagotchi {
    public:
        void bootloader();
        int selec(pm25* data, size_t size);
        void menu(pm25* data, size_t size, size_t selectedIndex); 
        void status(pm25* data, size_t selectedIndex);
        void pet(pm25* data, size_t selectedIndex);
    private:
        void frame(pm25* data, size_t selectedIndex);
        void adjustDirection();

        float posX = (SCREEN_WIDTH - 120) / 2 + 60;
        float posY = (SCREEN_HEIGHT - 40) / 2 + 20;
        float speed = 0.25;
        float directionX = 1;
        float directionY = 1;
        int rectWidth = 120;
        int rectHeight = 40;
        int rectX = (SCREEN_WIDTH - rectWidth) / 2;
        int rectY = (SCREEN_HEIGHT - rectHeight) / 2;
        const uint8_t* currentBitmap = TamagotchiBitRight; 
};
#endif
